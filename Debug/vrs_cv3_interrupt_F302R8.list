
vrs_cv3_interrupt_F302R8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007b8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000940  08000940  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000940  08000940  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000940  08000940  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000940  08000940  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000940  08000940  00010940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000944  08000944  00010944  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000948  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  0800094c  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  0800094c  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001c2a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000073d  00000000  00000000  00021c5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000260  00000000  00000000  000223a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000218  00000000  00000000  00022600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000143b2  00000000  00000000  00022818  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001d7d  00000000  00000000  00036bca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006e272  00000000  00000000  00038947  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a6bb9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000874  00000000  00000000  000a6c0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000928 	.word	0x08000928

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000928 	.word	0x08000928

080001c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	f003 0307 	and.w	r3, r3, #7
 80001d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001d8:	4b0c      	ldr	r3, [pc, #48]	; (800020c <__NVIC_SetPriorityGrouping+0x44>)
 80001da:	68db      	ldr	r3, [r3, #12]
 80001dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001de:	68ba      	ldr	r2, [r7, #8]
 80001e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80001e4:	4013      	ands	r3, r2
 80001e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80001e8:	68fb      	ldr	r3, [r7, #12]
 80001ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80001ec:	68bb      	ldr	r3, [r7, #8]
 80001ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80001f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80001f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80001fa:	4a04      	ldr	r2, [pc, #16]	; (800020c <__NVIC_SetPriorityGrouping+0x44>)
 80001fc:	68bb      	ldr	r3, [r7, #8]
 80001fe:	60d3      	str	r3, [r2, #12]
}
 8000200:	bf00      	nop
 8000202:	3714      	adds	r7, #20
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	e000ed00 	.word	0xe000ed00

08000210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000210:	b480      	push	{r7}
 8000212:	b083      	sub	sp, #12
 8000214:	af00      	add	r7, sp, #0
 8000216:	4603      	mov	r3, r0
 8000218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800021a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800021e:	2b00      	cmp	r3, #0
 8000220:	db0b      	blt.n	800023a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000222:	79fb      	ldrb	r3, [r7, #7]
 8000224:	f003 021f 	and.w	r2, r3, #31
 8000228:	4907      	ldr	r1, [pc, #28]	; (8000248 <__NVIC_EnableIRQ+0x38>)
 800022a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800022e:	095b      	lsrs	r3, r3, #5
 8000230:	2001      	movs	r0, #1
 8000232:	fa00 f202 	lsl.w	r2, r0, r2
 8000236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800023a:	bf00      	nop
 800023c:	370c      	adds	r7, #12
 800023e:	46bd      	mov	sp, r7
 8000240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000244:	4770      	bx	lr
 8000246:	bf00      	nop
 8000248:	e000e100 	.word	0xe000e100

0800024c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800024c:	b480      	push	{r7}
 800024e:	b083      	sub	sp, #12
 8000250:	af00      	add	r7, sp, #0
 8000252:	4603      	mov	r3, r0
 8000254:	6039      	str	r1, [r7, #0]
 8000256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800025c:	2b00      	cmp	r3, #0
 800025e:	db0a      	blt.n	8000276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000260:	683b      	ldr	r3, [r7, #0]
 8000262:	b2da      	uxtb	r2, r3
 8000264:	490c      	ldr	r1, [pc, #48]	; (8000298 <__NVIC_SetPriority+0x4c>)
 8000266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800026a:	0112      	lsls	r2, r2, #4
 800026c:	b2d2      	uxtb	r2, r2
 800026e:	440b      	add	r3, r1
 8000270:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000274:	e00a      	b.n	800028c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000276:	683b      	ldr	r3, [r7, #0]
 8000278:	b2da      	uxtb	r2, r3
 800027a:	4908      	ldr	r1, [pc, #32]	; (800029c <__NVIC_SetPriority+0x50>)
 800027c:	79fb      	ldrb	r3, [r7, #7]
 800027e:	f003 030f 	and.w	r3, r3, #15
 8000282:	3b04      	subs	r3, #4
 8000284:	0112      	lsls	r2, r2, #4
 8000286:	b2d2      	uxtb	r2, r2
 8000288:	440b      	add	r3, r1
 800028a:	761a      	strb	r2, [r3, #24]
}
 800028c:	bf00      	nop
 800028e:	370c      	adds	r7, #12
 8000290:	46bd      	mov	sp, r7
 8000292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000296:	4770      	bx	lr
 8000298:	e000e100 	.word	0xe000e100
 800029c:	e000ed00 	.word	0xe000ed00

080002a0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80002a4:	4b05      	ldr	r3, [pc, #20]	; (80002bc <LL_RCC_HSI_Enable+0x1c>)
 80002a6:	681b      	ldr	r3, [r3, #0]
 80002a8:	4a04      	ldr	r2, [pc, #16]	; (80002bc <LL_RCC_HSI_Enable+0x1c>)
 80002aa:	f043 0301 	orr.w	r3, r3, #1
 80002ae:	6013      	str	r3, [r2, #0]
}
 80002b0:	bf00      	nop
 80002b2:	46bd      	mov	sp, r7
 80002b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b8:	4770      	bx	lr
 80002ba:	bf00      	nop
 80002bc:	40021000 	.word	0x40021000

080002c0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80002c4:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <LL_RCC_HSI_IsReady+0x20>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	f003 0302 	and.w	r3, r3, #2
 80002cc:	2b02      	cmp	r3, #2
 80002ce:	bf0c      	ite	eq
 80002d0:	2301      	moveq	r3, #1
 80002d2:	2300      	movne	r3, #0
 80002d4:	b2db      	uxtb	r3, r3
}
 80002d6:	4618      	mov	r0, r3
 80002d8:	46bd      	mov	sp, r7
 80002da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002de:	4770      	bx	lr
 80002e0:	40021000 	.word	0x40021000

080002e4 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 80002ec:	4b07      	ldr	r3, [pc, #28]	; (800030c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	00db      	lsls	r3, r3, #3
 80002f8:	4904      	ldr	r1, [pc, #16]	; (800030c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80002fa:	4313      	orrs	r3, r2
 80002fc:	600b      	str	r3, [r1, #0]
}
 80002fe:	bf00      	nop
 8000300:	370c      	adds	r7, #12
 8000302:	46bd      	mov	sp, r7
 8000304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000308:	4770      	bx	lr
 800030a:	bf00      	nop
 800030c:	40021000 	.word	0x40021000

08000310 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000310:	b480      	push	{r7}
 8000312:	b083      	sub	sp, #12
 8000314:	af00      	add	r7, sp, #0
 8000316:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <LL_RCC_SetSysClkSource+0x24>)
 800031a:	685b      	ldr	r3, [r3, #4]
 800031c:	f023 0203 	bic.w	r2, r3, #3
 8000320:	4904      	ldr	r1, [pc, #16]	; (8000334 <LL_RCC_SetSysClkSource+0x24>)
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4313      	orrs	r3, r2
 8000326:	604b      	str	r3, [r1, #4]
}
 8000328:	bf00      	nop
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr
 8000334:	40021000 	.word	0x40021000

08000338 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800033c:	4b04      	ldr	r3, [pc, #16]	; (8000350 <LL_RCC_GetSysClkSource+0x18>)
 800033e:	685b      	ldr	r3, [r3, #4]
 8000340:	f003 030c 	and.w	r3, r3, #12
}
 8000344:	4618      	mov	r0, r3
 8000346:	46bd      	mov	sp, r7
 8000348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034c:	4770      	bx	lr
 800034e:	bf00      	nop
 8000350:	40021000 	.word	0x40021000

08000354 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800035c:	4b06      	ldr	r3, [pc, #24]	; (8000378 <LL_RCC_SetAHBPrescaler+0x24>)
 800035e:	685b      	ldr	r3, [r3, #4]
 8000360:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000364:	4904      	ldr	r1, [pc, #16]	; (8000378 <LL_RCC_SetAHBPrescaler+0x24>)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4313      	orrs	r3, r2
 800036a:	604b      	str	r3, [r1, #4]
}
 800036c:	bf00      	nop
 800036e:	370c      	adds	r7, #12
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr
 8000378:	40021000 	.word	0x40021000

0800037c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800037c:	b480      	push	{r7}
 800037e:	b083      	sub	sp, #12
 8000380:	af00      	add	r7, sp, #0
 8000382:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000384:	4b06      	ldr	r3, [pc, #24]	; (80003a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000386:	685b      	ldr	r3, [r3, #4]
 8000388:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800038c:	4904      	ldr	r1, [pc, #16]	; (80003a0 <LL_RCC_SetAPB1Prescaler+0x24>)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4313      	orrs	r3, r2
 8000392:	604b      	str	r3, [r1, #4]
}
 8000394:	bf00      	nop
 8000396:	370c      	adds	r7, #12
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr
 80003a0:	40021000 	.word	0x40021000

080003a4 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80003ac:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80003ae:	685b      	ldr	r3, [r3, #4]
 80003b0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80003b4:	4904      	ldr	r1, [pc, #16]	; (80003c8 <LL_RCC_SetAPB2Prescaler+0x24>)
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	4313      	orrs	r3, r2
 80003ba:	604b      	str	r3, [r1, #4]
}
 80003bc:	bf00      	nop
 80003be:	370c      	adds	r7, #12
 80003c0:	46bd      	mov	sp, r7
 80003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c6:	4770      	bx	lr
 80003c8:	40021000 	.word	0x40021000

080003cc <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80003d4:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003d6:	69da      	ldr	r2, [r3, #28]
 80003d8:	4907      	ldr	r1, [pc, #28]	; (80003f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	4313      	orrs	r3, r2
 80003de:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 80003e0:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80003e2:	69da      	ldr	r2, [r3, #28]
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	4013      	ands	r3, r2
 80003e8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003ea:	68fb      	ldr	r3, [r7, #12]
}
 80003ec:	bf00      	nop
 80003ee:	3714      	adds	r7, #20
 80003f0:	46bd      	mov	sp, r7
 80003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f6:	4770      	bx	lr
 80003f8:	40021000 	.word	0x40021000

080003fc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b085      	sub	sp, #20
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000404:	4b08      	ldr	r3, [pc, #32]	; (8000428 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000406:	699a      	ldr	r2, [r3, #24]
 8000408:	4907      	ldr	r1, [pc, #28]	; (8000428 <LL_APB2_GRP1_EnableClock+0x2c>)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4313      	orrs	r3, r2
 800040e:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000410:	4b05      	ldr	r3, [pc, #20]	; (8000428 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000412:	699a      	ldr	r2, [r3, #24]
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4013      	ands	r3, r2
 8000418:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800041a:	68fb      	ldr	r3, [r7, #12]
}
 800041c:	bf00      	nop
 800041e:	3714      	adds	r7, #20
 8000420:	46bd      	mov	sp, r7
 8000422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000426:	4770      	bx	lr
 8000428:	40021000 	.word	0x40021000

0800042c <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <LL_FLASH_SetLatency+0x24>)
 8000436:	681b      	ldr	r3, [r3, #0]
 8000438:	f023 0207 	bic.w	r2, r3, #7
 800043c:	4904      	ldr	r1, [pc, #16]	; (8000450 <LL_FLASH_SetLatency+0x24>)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	4313      	orrs	r3, r2
 8000442:	600b      	str	r3, [r1, #0]
}
 8000444:	bf00      	nop
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr
 8000450:	40022000 	.word	0x40022000

08000454 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000454:	b480      	push	{r7}
 8000456:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000458:	4b04      	ldr	r3, [pc, #16]	; (800046c <LL_FLASH_GetLatency+0x18>)
 800045a:	681b      	ldr	r3, [r3, #0]
 800045c:	f003 0307 	and.w	r3, r3, #7
}
 8000460:	4618      	mov	r0, r3
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	40022000 	.word	0x40022000

08000470 <LL_SYSTICK_SetClkSource>:
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK_DIV8
  *         @arg @ref LL_SYSTICK_CLKSOURCE_HCLK
  * @retval None
  */
__STATIC_INLINE void LL_SYSTICK_SetClkSource(uint32_t Source)
{
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]
  if (Source == LL_SYSTICK_CLKSOURCE_HCLK)
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	2b04      	cmp	r3, #4
 800047c:	d106      	bne.n	800048c <LL_SYSTICK_SetClkSource+0x1c>
  {
    SET_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 800047e:	4b09      	ldr	r3, [pc, #36]	; (80004a4 <LL_SYSTICK_SetClkSource+0x34>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	4a08      	ldr	r2, [pc, #32]	; (80004a4 <LL_SYSTICK_SetClkSource+0x34>)
 8000484:	f043 0304 	orr.w	r3, r3, #4
 8000488:	6013      	str	r3, [r2, #0]
  }
  else
  {
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
  }
}
 800048a:	e005      	b.n	8000498 <LL_SYSTICK_SetClkSource+0x28>
    CLEAR_BIT(SysTick->CTRL, LL_SYSTICK_CLKSOURCE_HCLK);
 800048c:	4b05      	ldr	r3, [pc, #20]	; (80004a4 <LL_SYSTICK_SetClkSource+0x34>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a04      	ldr	r2, [pc, #16]	; (80004a4 <LL_SYSTICK_SetClkSource+0x34>)
 8000492:	f023 0304 	bic.w	r3, r3, #4
 8000496:	6013      	str	r3, [r2, #0]
}
 8000498:	bf00      	nop
 800049a:	370c      	adds	r7, #12
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	e000e010 	.word	0xe000e010

080004a8 <main>:

uint8_t switch_state = 0;


int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80004ae:	2001      	movs	r0, #1
 80004b0:	f7ff ffa4 	bl	80003fc <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80004b4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80004b8:	f7ff ff88 	bl	80003cc <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004bc:	2003      	movs	r0, #3
 80004be:	f7ff fe83 	bl	80001c8 <__NVIC_SetPriorityGrouping>

  SystemClock_Config();
 80004c2:	f000 f8a1 	bl	8000608 <SystemClock_Config>

  /* Configure external interrupt - EXTI*/

  	  //type your code for EXTI configuration (priority, enable EXTI, setup EXTI for input pin, trigger edge) here:
  /*EXTI configuration*/
  NVIC_SetPriority(EXTI3_IRQn, 2);
 80004c6:	2102      	movs	r1, #2
 80004c8:	2009      	movs	r0, #9
 80004ca:	f7ff febf 	bl	800024c <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI3_IRQn);
 80004ce:	2009      	movs	r0, #9
 80004d0:	f7ff fe9e 	bl	8000210 <__NVIC_EnableIRQ>
    //NVIC->IP[9] |= 2 << 4;
    //NVIC->ISER[0] |= 1 << 10;

    /*set EXTI source PC3*/
    //SYSCFG->EXTICR[1] &= ~(0xD << 12);
  SYSCFG->EXTICR[0] |= SYSCFG_EXTICR1_EXTI3_PC;
 80004d4:	4b47      	ldr	r3, [pc, #284]	; (80005f4 <main+0x14c>)
 80004d6:	689b      	ldr	r3, [r3, #8]
 80004d8:	4a46      	ldr	r2, [pc, #280]	; (80005f4 <main+0x14c>)
 80004da:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004de:	6093      	str	r3, [r2, #8]
    //Enable interrupt from EXTI line 3
  EXTI->IMR |= EXTI_IMR_MR3;
 80004e0:	4b45      	ldr	r3, [pc, #276]	; (80005f8 <main+0x150>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a44      	ldr	r2, [pc, #272]	; (80005f8 <main+0x150>)
 80004e6:	f043 0308 	orr.w	r3, r3, #8
 80004ea:	6013      	str	r3, [r2, #0]
    //Set EXTI trigger to falling edge
  EXTI->RTSR &= ~(EXTI_IMR_MR3);
 80004ec:	4b42      	ldr	r3, [pc, #264]	; (80005f8 <main+0x150>)
 80004ee:	689b      	ldr	r3, [r3, #8]
 80004f0:	4a41      	ldr	r2, [pc, #260]	; (80005f8 <main+0x150>)
 80004f2:	f023 0308 	bic.w	r3, r3, #8
 80004f6:	6093      	str	r3, [r2, #8]
  EXTI->FTSR |= EXTI_IMR_MR3;
 80004f8:	4b3f      	ldr	r3, [pc, #252]	; (80005f8 <main+0x150>)
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	4a3e      	ldr	r2, [pc, #248]	; (80005f8 <main+0x150>)
 80004fe:	f043 0308 	orr.w	r3, r3, #8
 8000502:	60d3      	str	r3, [r2, #12]

  /* Configure GPIOC-3 pin as an input pin - button */

	  //type your code for GPIO configuration here:
  RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 8000504:	4b3d      	ldr	r3, [pc, #244]	; (80005fc <main+0x154>)
 8000506:	695b      	ldr	r3, [r3, #20]
 8000508:	4a3c      	ldr	r2, [pc, #240]	; (80005fc <main+0x154>)
 800050a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800050e:	6153      	str	r3, [r2, #20]
  GPIOC->MODER &= ~(GPIO_MODER_MODER3);
 8000510:	4b3b      	ldr	r3, [pc, #236]	; (8000600 <main+0x158>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a3a      	ldr	r2, [pc, #232]	; (8000600 <main+0x158>)
 8000516:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800051a:	6013      	str	r3, [r2, #0]
  GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPDR3);
 800051c:	4b38      	ldr	r3, [pc, #224]	; (8000600 <main+0x158>)
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	4a37      	ldr	r2, [pc, #220]	; (8000600 <main+0x158>)
 8000522:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000526:	60d3      	str	r3, [r2, #12]
  GPIOC->PUPDR |= GPIO_PUPDR_PUPDR3_0;
 8000528:	4b35      	ldr	r3, [pc, #212]	; (8000600 <main+0x158>)
 800052a:	68db      	ldr	r3, [r3, #12]
 800052c:	4a34      	ldr	r2, [pc, #208]	; (8000600 <main+0x158>)
 800052e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000532:	60d3      	str	r3, [r2, #12]

  /* Configure GPIOA-4 pin as an output pin - LED */

	  //type your code for GPIO configuration here:
  RCC->AHBENR |= RCC_AHBENR_GPIOAEN;
 8000534:	4b31      	ldr	r3, [pc, #196]	; (80005fc <main+0x154>)
 8000536:	695b      	ldr	r3, [r3, #20]
 8000538:	4a30      	ldr	r2, [pc, #192]	; (80005fc <main+0x154>)
 800053a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800053e:	6153      	str	r3, [r2, #20]
  GPIOA->MODER &= ~(GPIO_MODER_MODER4);
 8000540:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800054a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800054e:	6013      	str	r3, [r2, #0]
  GPIOA->MODER |= GPIO_MODER_MODER4_0;
 8000550:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800055a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800055e:	6013      	str	r3, [r2, #0]
  GPIOA->OTYPER &= ~(GPIO_OTYPER_OT_4);
 8000560:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000564:	685b      	ldr	r3, [r3, #4]
 8000566:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800056a:	f023 0310 	bic.w	r3, r3, #16
 800056e:	6053      	str	r3, [r2, #4]
  GPIOA->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR4);
 8000570:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000574:	689b      	ldr	r3, [r3, #8]
 8000576:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800057a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800057e:	6093      	str	r3, [r2, #8]
  GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR4);
 8000580:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000584:	68db      	ldr	r3, [r3, #12]
 8000586:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800058a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800058e:	60d3      	str	r3, [r2, #12]


  while (1)
  {
	  // Modify the code below so it sets/resets used output pin connected to the LED
	  if(switch_state)
 8000590:	4b1c      	ldr	r3, [pc, #112]	; (8000604 <main+0x15c>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d024      	beq.n	80005e2 <main+0x13a>
	  {
		  GPIOA->BSRR |= GPIO_BSRR_BS_4;
 8000598:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800059c:	699b      	ldr	r3, [r3, #24]
 800059e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005a2:	f043 0310 	orr.w	r3, r3, #16
 80005a6:	6193      	str	r3, [r2, #24]
		  for(uint16_t i=0; i<0xFF00; i++){}
 80005a8:	2300      	movs	r3, #0
 80005aa:	80fb      	strh	r3, [r7, #6]
 80005ac:	e002      	b.n	80005b4 <main+0x10c>
 80005ae:	88fb      	ldrh	r3, [r7, #6]
 80005b0:	3301      	adds	r3, #1
 80005b2:	80fb      	strh	r3, [r7, #6]
 80005b4:	88fb      	ldrh	r3, [r7, #6]
 80005b6:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 80005ba:	d3f8      	bcc.n	80005ae <main+0x106>
		  GPIOA->BRR |= GPIO_BRR_BR_4;
 80005bc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005c2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005c6:	f043 0310 	orr.w	r3, r3, #16
 80005ca:	6293      	str	r3, [r2, #40]	; 0x28
		  for(uint16_t i=0; i<0xFF00; i++){}
 80005cc:	2300      	movs	r3, #0
 80005ce:	80bb      	strh	r3, [r7, #4]
 80005d0:	e002      	b.n	80005d8 <main+0x130>
 80005d2:	88bb      	ldrh	r3, [r7, #4]
 80005d4:	3301      	adds	r3, #1
 80005d6:	80bb      	strh	r3, [r7, #4]
 80005d8:	88bb      	ldrh	r3, [r7, #4]
 80005da:	f5b3 4f7f 	cmp.w	r3, #65280	; 0xff00
 80005de:	d3f8      	bcc.n	80005d2 <main+0x12a>
 80005e0:	e7d6      	b.n	8000590 <main+0xe8>
	  }
	  else
	  {
		  GPIOA->BRR |= GPIO_BRR_BR_4;
 80005e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80005e8:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80005ec:	f043 0310 	orr.w	r3, r3, #16
 80005f0:	6293      	str	r3, [r2, #40]	; 0x28
	  if(switch_state)
 80005f2:	e7cd      	b.n	8000590 <main+0xe8>
 80005f4:	40010000 	.word	0x40010000
 80005f8:	40010400 	.word	0x40010400
 80005fc:	40021000 	.word	0x40021000
 8000600:	48000800 	.word	0x48000800
 8000604:	20000020 	.word	0x20000020

08000608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 800060c:	2000      	movs	r0, #0
 800060e:	f7ff ff0d 	bl	800042c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000612:	bf00      	nop
 8000614:	f7ff ff1e 	bl	8000454 <LL_FLASH_GetLatency>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d1fa      	bne.n	8000614 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 800061e:	f7ff fe3f 	bl	80002a0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000622:	bf00      	nop
 8000624:	f7ff fe4c 	bl	80002c0 <LL_RCC_HSI_IsReady>
 8000628:	4603      	mov	r3, r0
 800062a:	2b01      	cmp	r3, #1
 800062c:	d1fa      	bne.n	8000624 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800062e:	2010      	movs	r0, #16
 8000630:	f7ff fe58 	bl	80002e4 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000634:	2000      	movs	r0, #0
 8000636:	f7ff fe8d 	bl	8000354 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800063a:	2000      	movs	r0, #0
 800063c:	f7ff fe9e 	bl	800037c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 8000640:	2000      	movs	r0, #0
 8000642:	f7ff feaf 	bl	80003a4 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 8000646:	2000      	movs	r0, #0
 8000648:	f7ff fe62 	bl	8000310 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 800064c:	bf00      	nop
 800064e:	f7ff fe73 	bl	8000338 <LL_RCC_GetSysClkSource>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d1fa      	bne.n	800064e <SystemClock_Config+0x46>
  {

  }
  LL_Init1msTick(8000000);
 8000658:	4805      	ldr	r0, [pc, #20]	; (8000670 <SystemClock_Config+0x68>)
 800065a:	f000 f8fd 	bl	8000858 <LL_Init1msTick>
  LL_SYSTICK_SetClkSource(LL_SYSTICK_CLKSOURCE_HCLK);
 800065e:	2004      	movs	r0, #4
 8000660:	f7ff ff06 	bl	8000470 <LL_SYSTICK_SetClkSource>
  LL_SetSystemCoreClock(8000000);
 8000664:	4802      	ldr	r0, [pc, #8]	; (8000670 <SystemClock_Config+0x68>)
 8000666:	f000 f92b 	bl	80008c0 <LL_SetSystemCoreClock>
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	007a1200 	.word	0x007a1200

08000674 <checkButtonState>:
  /* USER CODE END Error_Handler_Debug */
}


uint8_t checkButtonState(GPIO_TypeDef* PORT, uint8_t PIN, uint8_t edge, uint8_t samples_window, uint8_t samples_required)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
 800067c:	4608      	mov	r0, r1
 800067e:	4611      	mov	r1, r2
 8000680:	461a      	mov	r2, r3
 8000682:	4603      	mov	r3, r0
 8000684:	70fb      	strb	r3, [r7, #3]
 8000686:	460b      	mov	r3, r1
 8000688:	70bb      	strb	r3, [r7, #2]
 800068a:	4613      	mov	r3, r2
 800068c:	707b      	strb	r3, [r7, #1]
	  //type your code for "checkButtonState" implementation here:
	uint8_t button_state = 0, timeout = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	75fb      	strb	r3, [r7, #23]
 8000692:	2300      	movs	r3, #0
 8000694:	75bb      	strb	r3, [r7, #22]
	uint32_t ed = edge;
 8000696:	78bb      	ldrb	r3, [r7, #2]
 8000698:	613b      	str	r3, [r7, #16]

	volatile uint32_t edge2 = (ed << EXTI_IMR_MR3_Pos);
 800069a:	693b      	ldr	r3, [r7, #16]
 800069c:	00db      	lsls	r3, r3, #3
 800069e:	60fb      	str	r3, [r7, #12]

		while(button_state < samples_required && timeout < samples_window)
 80006a0:	e019      	b.n	80006d6 <checkButtonState+0x62>
		{
			if((!(PORT->IDR & (1 << PIN)) && (EXTI->FTSR == edge2) )/*LL_GPIO_IsInputPinSet(PORT, PIN)*/)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	691b      	ldr	r3, [r3, #16]
 80006a6:	78fa      	ldrb	r2, [r7, #3]
 80006a8:	2101      	movs	r1, #1
 80006aa:	fa01 f202 	lsl.w	r2, r1, r2
 80006ae:	4013      	ands	r3, r2
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d108      	bne.n	80006c6 <checkButtonState+0x52>
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <checkButtonState+0x94>)
 80006b6:	68da      	ldr	r2, [r3, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d103      	bne.n	80006c6 <checkButtonState+0x52>
			{
				button_state += 1;
 80006be:	7dfb      	ldrb	r3, [r7, #23]
 80006c0:	3301      	adds	r3, #1
 80006c2:	75fb      	strb	r3, [r7, #23]
 80006c4:	e001      	b.n	80006ca <checkButtonState+0x56>
			}
			else
			{
				button_state = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	75fb      	strb	r3, [r7, #23]
			}

			timeout += 1;
 80006ca:	7dbb      	ldrb	r3, [r7, #22]
 80006cc:	3301      	adds	r3, #1
 80006ce:	75bb      	strb	r3, [r7, #22]
			LL_mDelay(1);
 80006d0:	2001      	movs	r0, #1
 80006d2:	f000 f8cf 	bl	8000874 <LL_mDelay>
		while(button_state < samples_required && timeout < samples_window)
 80006d6:	7dfa      	ldrb	r2, [r7, #23]
 80006d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d203      	bcs.n	80006e8 <checkButtonState+0x74>
 80006e0:	7dba      	ldrb	r2, [r7, #22]
 80006e2:	787b      	ldrb	r3, [r7, #1]
 80006e4:	429a      	cmp	r2, r3
 80006e6:	d3dc      	bcc.n	80006a2 <checkButtonState+0x2e>
		}

		if((button_state >= samples_required) && (timeout <= samples_window))
 80006e8:	7dfa      	ldrb	r2, [r7, #23]
 80006ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80006ee:	429a      	cmp	r2, r3
 80006f0:	d305      	bcc.n	80006fe <checkButtonState+0x8a>
 80006f2:	7dba      	ldrb	r2, [r7, #22]
 80006f4:	787b      	ldrb	r3, [r7, #1]
 80006f6:	429a      	cmp	r2, r3
 80006f8:	d801      	bhi.n	80006fe <checkButtonState+0x8a>
		{
			return 1;
 80006fa:	2301      	movs	r3, #1
 80006fc:	e000      	b.n	8000700 <checkButtonState+0x8c>
		}
		else
		{
			return 0;
 80006fe:	2300      	movs	r3, #0
		}
}
 8000700:	4618      	mov	r0, r3
 8000702:	3718      	adds	r7, #24
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40010400 	.word	0x40010400

0800070c <EXTI3_IRQHandler>:



void EXTI3_IRQHandler(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b082      	sub	sp, #8
 8000710:	af02      	add	r7, sp, #8
	if(checkButtonState(GPIO_PORT_BUTTON,
 8000712:	2314      	movs	r3, #20
 8000714:	9300      	str	r3, [sp, #0]
 8000716:	231e      	movs	r3, #30
 8000718:	2201      	movs	r2, #1
 800071a:	2103      	movs	r1, #3
 800071c:	480a      	ldr	r0, [pc, #40]	; (8000748 <EXTI3_IRQHandler+0x3c>)
 800071e:	f7ff ffa9 	bl	8000674 <checkButtonState>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d006      	beq.n	8000736 <EXTI3_IRQHandler+0x2a>
						GPIO_PIN_BUTTON,
						BUTTON_EXTI_TRIGGER,
						BUTTON_EXTI_SAMPLES_WINDOW,
						BUTTON_EXTI_SAMPLES_REQUIRED))
	{
		switch_state ^= 1;
 8000728:	4b08      	ldr	r3, [pc, #32]	; (800074c <EXTI3_IRQHandler+0x40>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	f083 0301 	eor.w	r3, r3, #1
 8000730:	b2da      	uxtb	r2, r3
 8000732:	4b06      	ldr	r3, [pc, #24]	; (800074c <EXTI3_IRQHandler+0x40>)
 8000734:	701a      	strb	r2, [r3, #0]
	}

	/* Clear EXTI3 pending register flag */

		//type your code for pending register flag clear here:
	EXTI->PR |= (EXTI_PR_PIF3);
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <EXTI3_IRQHandler+0x44>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	4a05      	ldr	r2, [pc, #20]	; (8000750 <EXTI3_IRQHandler+0x44>)
 800073c:	f043 0308 	orr.w	r3, r3, #8
 8000740:	6153      	str	r3, [r2, #20]
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	48000800 	.word	0x48000800
 800074c:	20000020 	.word	0x20000020
 8000750:	40010400 	.word	0x40010400

08000754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <NMI_Handler+0x4>

0800075a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <HardFault_Handler+0x4>

08000760 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <MemManage_Handler+0x4>

08000766 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <BusFault_Handler+0x4>

0800076c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <UsageFault_Handler+0x4>

08000772 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000776:	bf00      	nop
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr

08000780 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000784:	bf00      	nop
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr

0800078e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr
	...

080007ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007b0:	4b06      	ldr	r3, [pc, #24]	; (80007cc <SystemInit+0x20>)
 80007b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007b6:	4a05      	ldr	r2, [pc, #20]	; (80007cc <SystemInit+0x20>)
 80007b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007c0:	bf00      	nop
 80007c2:	46bd      	mov	sp, r7
 80007c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c8:	4770      	bx	lr
 80007ca:	bf00      	nop
 80007cc:	e000ed00 	.word	0xe000ed00

080007d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80007d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000808 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80007d4:	480d      	ldr	r0, [pc, #52]	; (800080c <LoopForever+0x6>)
  ldr r1, =_edata
 80007d6:	490e      	ldr	r1, [pc, #56]	; (8000810 <LoopForever+0xa>)
  ldr r2, =_sidata
 80007d8:	4a0e      	ldr	r2, [pc, #56]	; (8000814 <LoopForever+0xe>)
  movs r3, #0
 80007da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80007dc:	e002      	b.n	80007e4 <LoopCopyDataInit>

080007de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80007de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80007e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80007e2:	3304      	adds	r3, #4

080007e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80007e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80007e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80007e8:	d3f9      	bcc.n	80007de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80007ea:	4a0b      	ldr	r2, [pc, #44]	; (8000818 <LoopForever+0x12>)
  ldr r4, =_ebss
 80007ec:	4c0b      	ldr	r4, [pc, #44]	; (800081c <LoopForever+0x16>)
  movs r3, #0
 80007ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007f0:	e001      	b.n	80007f6 <LoopFillZerobss>

080007f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007f4:	3204      	adds	r2, #4

080007f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007f8:	d3fb      	bcc.n	80007f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007fa:	f7ff ffd7 	bl	80007ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007fe:	f000 f86f 	bl	80008e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000802:	f7ff fe51 	bl	80004a8 <main>

08000806 <LoopForever>:

LoopForever:
    b LoopForever
 8000806:	e7fe      	b.n	8000806 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000808:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 800080c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000810:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000814:	08000948 	.word	0x08000948
  ldr r2, =_sbss
 8000818:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800081c:	20000024 	.word	0x20000024

08000820 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000820:	e7fe      	b.n	8000820 <ADC1_IRQHandler>
	...

08000824 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 800082e:	687a      	ldr	r2, [r7, #4]
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	fbb2 f3f3 	udiv	r3, r2, r3
 8000836:	4a07      	ldr	r2, [pc, #28]	; (8000854 <LL_InitTick+0x30>)
 8000838:	3b01      	subs	r3, #1
 800083a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 800083c:	4b05      	ldr	r3, [pc, #20]	; (8000854 <LL_InitTick+0x30>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000842:	4b04      	ldr	r3, [pc, #16]	; (8000854 <LL_InitTick+0x30>)
 8000844:	2205      	movs	r2, #5
 8000846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8000848:	bf00      	nop
 800084a:	370c      	adds	r7, #12
 800084c:	46bd      	mov	sp, r7
 800084e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000852:	4770      	bx	lr
 8000854:	e000e010 	.word	0xe000e010

08000858 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8000860:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000864:	6878      	ldr	r0, [r7, #4]
 8000866:	f7ff ffdd 	bl	8000824 <LL_InitTick>
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800087c:	4b0f      	ldr	r3, [pc, #60]	; (80008bc <LL_mDelay+0x48>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8000882:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800088a:	d00c      	beq.n	80008a6 <LL_mDelay+0x32>
  {
    Delay++;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3301      	adds	r3, #1
 8000890:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 8000892:	e008      	b.n	80008a6 <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8000894:	4b09      	ldr	r3, [pc, #36]	; (80008bc <LL_mDelay+0x48>)
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800089c:	2b00      	cmp	r3, #0
 800089e:	d002      	beq.n	80008a6 <LL_mDelay+0x32>
    {
      Delay--;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	3b01      	subs	r3, #1
 80008a4:	607b      	str	r3, [r7, #4]
  while (Delay)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d1f3      	bne.n	8000894 <LL_mDelay+0x20>
    }
  }
}
 80008ac:	bf00      	nop
 80008ae:	bf00      	nop
 80008b0:	3714      	adds	r7, #20
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000e010 	.word	0xe000e010

080008c0 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80008c8:	4a04      	ldr	r2, [pc, #16]	; (80008dc <LL_SetSystemCoreClock+0x1c>)
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6013      	str	r3, [r2, #0]
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	20000000 	.word	0x20000000

080008e0 <__libc_init_array>:
 80008e0:	b570      	push	{r4, r5, r6, lr}
 80008e2:	4d0d      	ldr	r5, [pc, #52]	; (8000918 <__libc_init_array+0x38>)
 80008e4:	4c0d      	ldr	r4, [pc, #52]	; (800091c <__libc_init_array+0x3c>)
 80008e6:	1b64      	subs	r4, r4, r5
 80008e8:	10a4      	asrs	r4, r4, #2
 80008ea:	2600      	movs	r6, #0
 80008ec:	42a6      	cmp	r6, r4
 80008ee:	d109      	bne.n	8000904 <__libc_init_array+0x24>
 80008f0:	4d0b      	ldr	r5, [pc, #44]	; (8000920 <__libc_init_array+0x40>)
 80008f2:	4c0c      	ldr	r4, [pc, #48]	; (8000924 <__libc_init_array+0x44>)
 80008f4:	f000 f818 	bl	8000928 <_init>
 80008f8:	1b64      	subs	r4, r4, r5
 80008fa:	10a4      	asrs	r4, r4, #2
 80008fc:	2600      	movs	r6, #0
 80008fe:	42a6      	cmp	r6, r4
 8000900:	d105      	bne.n	800090e <__libc_init_array+0x2e>
 8000902:	bd70      	pop	{r4, r5, r6, pc}
 8000904:	f855 3b04 	ldr.w	r3, [r5], #4
 8000908:	4798      	blx	r3
 800090a:	3601      	adds	r6, #1
 800090c:	e7ee      	b.n	80008ec <__libc_init_array+0xc>
 800090e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000912:	4798      	blx	r3
 8000914:	3601      	adds	r6, #1
 8000916:	e7f2      	b.n	80008fe <__libc_init_array+0x1e>
 8000918:	08000940 	.word	0x08000940
 800091c:	08000940 	.word	0x08000940
 8000920:	08000940 	.word	0x08000940
 8000924:	08000944 	.word	0x08000944

08000928 <_init>:
 8000928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800092a:	bf00      	nop
 800092c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800092e:	bc08      	pop	{r3}
 8000930:	469e      	mov	lr, r3
 8000932:	4770      	bx	lr

08000934 <_fini>:
 8000934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000936:	bf00      	nop
 8000938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800093a:	bc08      	pop	{r3}
 800093c:	469e      	mov	lr, r3
 800093e:	4770      	bx	lr
